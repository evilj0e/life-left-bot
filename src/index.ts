import "dotenv/config";
import express from "express";
import { Scenes, session, Telegraf, Format, Markup } from "telegraf";
import { parse, isValid, differenceInDays } from "date-fns";

import { Context } from "./types.js";
import { WIZARD_ID } from "./constants.js";
import { data } from "./data.js";

const wizard = new Scenes.WizardScene<Context>(
  WIZARD_ID,
  async (ctx) => {
    await ctx.sendMessage(
      Format.fmt`–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (${Format.italic`–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.11.1990`})`
    );

    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const parsedDate = parse(ctx.message.text, "dd.MM.yyyy", new Date());
      const isParsedDateValid = isValid(parsedDate);
      const isTooOld = differenceInDays(new Date(), parsedDate) > 365 * 122;

      if (isTooOld) {
        await ctx.reply(
          "–£—Ö —Ç—ã! –í—ã –ø—Ä–µ–≤–∑–æ—à–ª–∏ –ñ–∞–Ω–Ω—É –ö–∞–ª—å–º–∞–Ω, —Å–∞–º–æ–≥–æ –¥–æ–ª–≥–æ–∂–∏–≤—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–∏—Ä–µ! –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—Å –Ω–∞ ‚Äú–ö–Ω–∏–≥—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –ì–∏–Ω–Ω–µ—Å—Å–∞‚Äù."
        );
        return;
      }

      if (!isParsedDateValid) {
        await ctx.reply("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥");
        return;
      }

      ctx.scene.session.dateOfBirth = parsedDate;

      await ctx.reply(
        Format.fmt`–ü–æ–ª`,
        Markup.inlineKeyboard([
          Markup.button.callback("üï∫", "male"),
          Markup.button.callback("üíÉ", "female"),
        ])
      );
    } else {
      await ctx.reply(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ‚Äì –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–Ω–µ–π. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
      );
      return;
    }

    return ctx.wizard.next();
  },

  async (ctx) => {
    const hasAnswer = ctx.message && "text" in ctx.message;
    const hasQuery = ctx.callbackQuery && "data" in ctx.callbackQuery;

    if (hasAnswer || hasQuery) {
      const answer = hasQuery
        ? ctx.callbackQuery.data
        : hasAnswer
        ? ctx.message.text
        : "";

      if (!["male", "female"].includes(answer)) {
        await ctx.reply(
          "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–µ–Ω –ø–æ–ª ‚Äì –æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
        );
        return;
      }

      ctx.scene.session.sex = answer as "male";
    } else {
      await ctx.reply(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–µ–Ω –ø–æ–ª ‚Äì –æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
      );
      return;
    }

    await ctx.reply(
      Format.fmt`–°—Ç—Ä–∞–Ω–∞ (${Format.italic`–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è`})`,
      Markup.inlineKeyboard([Markup.button.callback("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip")])
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    const hasAnswer = ctx.message && "text" in ctx.message;
    const hasSkip = ctx.callbackQuery && "data" in ctx.callbackQuery;

    if (hasAnswer || hasSkip) {
      const input =
        hasAnswer && ctx.message.text
          ? ctx.message.text.toLowerCase()
          : "world";

      const item =
        input && data.find((record) => record.country.toLowerCase() === input);

      if (!item) {
        await ctx.reply(
          "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ ‚Äì –æ–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
        );
        return;
      }

      ctx.scene.session.country = input;

      const daysLived = differenceInDays(
        new Date(),
        ctx.scene.session.dateOfBirth
      );
      const totalDays = Math.round(365 * item[ctx.scene.session.sex]);
      const percentage = (daysLived / totalDays) * 100;
      const leftDays = totalDays - daysLived;

      const CHART_LENGTH = 380;
      const chartFilled = Math.floor((CHART_LENGTH * percentage) / 100);

      await ctx.reply(
        Format.fmt`${Array(chartFilled).fill("‚ñ†").join("")}${Array(
          CHART_LENGTH - chartFilled
        )
          .fill("‚ñ°")
          .join("")}
        
–í—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª–∏ ${daysLived} ${
          daysLived === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"
        }, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${percentage.toFixed(2)}% –æ—Ç –≤—Å–µ–π –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.

–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏—Ç—å ${Format.underline`${leftDays} ${
          leftDays === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"
        }`}.

(–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –û–û–ù)`
      );

      await ctx.reply(
        `–ö—Å—Ç–∞—Ç–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞ ‚Äî @antonkonevcom.

–Ø –Ω–µ –æ–±–µ—â–∞—é –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å, –Ω–æ –ø–æ–º–æ–≥—É –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –µ—ë –Ω–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–∏.

üè¥`
      );
    } else {
      await ctx.reply(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ ‚Äì –æ–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
      );
      return;
    }

    return ctx.scene.leave();
  }
);

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw Error(
    "Before start you have to specify TELEGRAM_BOT_TOKEN in the .env"
  );
}

const bot = new Telegraf<Context>(process.env.TELEGRAM_BOT_TOKEN);
const stage = new Scenes.Stage<Context>([wizard], {
  default: WIZARD_ID,
});
bot.use(session());
bot.use(stage.middleware());
bot.launch();

const app = express();
// app.use(
//   await bot.createWebhook({
//     domain: process.env.HOST || "",
//   })
// );

app.get("/health", (_, res) => {
  res.send({ status: "ok" });
});

app.listen(process.env.PORT, () =>
  console.log("Listening on port", process.env.PORT)
);
